#!/usr/bin/env bash

# formatlto
# Formats an LTO tape with LTFS.

SCRIPTDIR=$(dirname "${0}")
DEPENDENCIES=(mkltfs)
TAPE_SERIAL_REGEX="^[A-Z0-9]{6}$"
BLUE="$(tput setaf 4)"  # Blue     - For Questions
NC="$(tput sgr0)"       # No Color

_check_dependencies(){
    DEPS_OK=YES
    while [ "${*}" != "" ] ; do
        DEPENDENCY="${1}"
        if [ ! "$(which "${DEPENDENCY}")" ] ; then
            _report -wt "This script requires ${DEPENDENCY} to run but it is not installed"
            _report -wt "If you are running ubuntu or debian you might be able to install ${DEPENDENCY} with the following command"
            _report -wt "sudo apt-get install ${DEPENDENCY}"
            _report -wt "If you are running mac you might be able to install ${DEPENDENCY} with the following command"
            _report -wt "brew install ${DEPENDENCY}"
            DEPS_OK=NO
        fi
        shift
    done
    if [[ "${DEPS_OK}" = "NO" ]]; then
        _report -wt "Unmet dependencies"
        _report -wt "Aborting!"
        exit 1
    else
        return 0
    fi
}

_report(){
    local RED="$(tput setaf 1)"   # Red      - For Warnings
    local GREEN="$(tput setaf 2)" # Green    - For Declarations
    local BLUE="$(tput setaf 4)"  # Blue     - For Questions
    local NC="$(tput sgr0)"       # No Color
    local COLOR=""
    local STARTMESSAGE=""
    local ECHOOPT=""
    local LOG_MESSAGE=""
    OPTIND=1
    while getopts ":qdwstn" OPT; do
        case "${OPT}" in
            q) COLOR="${BLUE}" ;;                         # question mode, use color blue
            d) COLOR="${GREEN}" ;;                        # declaration mode, use color green
            w) COLOR="${RED}" ;;                          # warning mode, use color red
            s) STARTMESSAGE+=([$(basename "${0}")] ) ;;   # prepend scriptname to the message
            t) STARTMESSAGE+=($(_get_iso8601) '- ' ) ;;   # prepend timestamp to the message
            n) ECHOOPT="-n" ;;                            # to avoid line breaks after echo
        esac
    done
    shift $(( OPTIND - 1 ))
    MESSAGE="${1}"
    echo "${ECHOOPT}" "${COLOR}${STARTMESSAGE[*]}${MESSAGE}${NC}"
}

_usage(){
    cat <<EOF
$(basename "${0}")
This script formats an LTO tape with LTFS.
Dependencies: ${DEPENDENCIES[@]}

Usage: $(basename "${0}") [-f] [-c] | -h
  -f  force formatting
  -c  use compression
  -x  use barcode label as tape serial (caveat: this is not standard)
  -h  display this help
EOF
}

unset MIDDLE_OPTIONS
while getopts ":fcxh" opt ; do
    case "${opt}" in
        f) FORCE=1 ;;
        c) COMPRESS=1 ;;
        x) TAPE_SERIAL_REGEX="^[A-Z0-9]{6}(L[5-8]|M8)$" ;;
        h) _usage ; exit 0 ;;
        *) _report -w "Error: Bad option -${OPTARG}" ; _usage ; exit 1 ;;
    esac
done

_check_dependencies "${DEPENDENCIES[@]}"

if [ "${FORCE}" = "1" ] ; then
    MIDDLE_OPTIONS+=(-f)
    _report -d "Will force formatting."
fi

if [ ! "${COMPRESS}" = "1" ] ; then
    MIDDLE_OPTIONS+=(-c)
else
    _report -d "Will use compression."
fi

if [ ! "${LTO_ARRAY}" ] ; then
    if [[ "$(uname -s)" = "Darwin" ]] ; then
        # try to figure out how many LTO decks are attached
        LTO_ARRAY=($(system_profiler SPSASDataType | grep "SCSI Target Identifier" | cut -d : -f2 | sort | xargs))
    else
        #### TO DO: itemize when there are multiple LTO drives in Linux and Windows
        LTO_ARRAY=(0)
    fi
fi

if [[ "${#LTO_ARRAY[@]}" -gt 1 ]] ; then
    PS3="${BLUE}Which LTO deck?${NC} "
    eval set "${LTO_ARRAY[@]}"
    select DECK in "$@" ; do
       break
    done
    if [ ! "${DECK}" ] ; then
        _report -w "Error: You selected an invalid deck."
        exit 1
    fi
else
    #### TO DO: select the correct path to the drive on Linux and Windows
    if [[ "$(uname -s)" = "Linux" ]] ; then
        DECK='/dev/sg3'
    else
        DECK=0
    fi
fi

_report -qn "Enter the tape identifier: "
read TAPE_SERIAL
if [[ ! $(echo "${TAPE_SERIAL}" | grep -E "${TAPE_SERIAL_REGEX}") ]] ; then
    _report -w "Error: The tape serial is not valid."
    exit 1
fi
mkltfs ${MIDDLE_OPTIONS[@]} --device=${DECK} --tape-serial="${TAPE_SERIAL}" --volume-name="${TAPE_SERIAL}"
