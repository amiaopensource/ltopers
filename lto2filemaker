#!/usr/bin/env bash

# lto2filemaker
# This script presumes that you've setup a filemaker database with Filemaker
# Server using two tables called "lto_tapes" and "lto_files" with fields
# according to the LTFS XML format.

VERSION=0.1
SCRIPTDIR=$(dirname "${0}")
REQUIRECONFIG="Y"
DEPENDENCIES=(xml curl)
unset CURL_OPTS
VERBOSITY=0

. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ; }

_usage(){
cat <<EOF
$(basename "${0}") ${VERSION}
This application will create a file suitable for broadcast or editing
from a video file or package input with the following options.
Dependencies: ${DEPENDENCIES[@]}
Usage: $(basename "${0}") [-v|-h] LTFS_SCHEMA_FILE
  -v N  verbosity, 0 hides curl errors, default is 0
  -h    display this help
EOF
}
[ "${#}" = 0 ] && _usage

OPTIND=1
while getopts ":v:h" opt ; do
    case "${opt}" in
        v) VERBOSITY="${OPTARG}" ;;
        h) _usage ; exit 0 ;;
        :) echo "Error: Option -$OPTARG requires an argument" ; exit 1 ;;
        *) echo "Error: Bad option -$OPTARG" ; _usage ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

SCHEMA_FILE="${1}"
SCHEMA_NAME=$(basename "${SCHEMA_FILE}")

if [[ "${VERBOSITY}" = "0" ]] ; then
    CURL_OPTS+="-s"
fi

LTO_TAPE_TMP=$(_maketemp)
xml sel -t -m "/ltfsindex" -o " --data-urlencode \"creator=" -v creator -o "\" --data-urlencode \"volumeuuid=" -v volumeuuid -o "\" --data-urlencode \"generationnumber=" -v generationnumber -o "\" --data-urlencode \"accesstime=" -v directory[1]/accesstime -o "\" --data-urlencode \"backuptime=" -v directory[1]/backuptime -o "\" --data-urlencode \"changetime=" -v directory[1]/changetime -o "\" --data-urlencode \"creationtime=" -v directory[1]/creationtime -o "\" --data-urlencode \"modifytime=" -v directory[1]/modifytime -o "\" --data-urlencode \"updatetime=" -v updatetime -o "\" --data-urlencode \"readonly=" -v directory[1]/readonly -o "\" --data-urlencode \"allowpolicyupdate=" -v allowpolicyupdate -o "\" --data-urlencode \"highestfileuid=" -v highestfileuid -o "\" --data-urlencode \"name=" -v directory[1]/name -o "\" --data-urlencode \"uniq=" -v directory[1]/modifytime -o "." -v directory[1]/highestfileuid -o "." -v volumeuuid -o "." -v updatetime -o "\"" -n "${SCHEMA_FILE}" > "${LTO_TAPE_TMP}"

CURL_OUTPUT=$(_maketemp)

CURL_OPTS+=(-S)
CURL_OPTS+=(-o "${CURL_OUTPUT}")

while read TAPE ; do
    if [[ "${TAPE}" ]] ; then
        TAPE_CMD="curl ${CURL_OPTS[@]} -G "${TAPE}" \"http://"${FILEMAKER_XML_URL}"?-db="${FILEMAKER_DB}"&-lay=lto_tapes&-new\""
        TAPE_ID=$(echo "${TAPE}" | grep -o "name=[^ ]*" | sed 's/"//g')
        _report -d "Uploading tape metadata for tape "${TAPE_ID}". Please wait…"
        eval "${TAPE_CMD}"
        ERROR_CODE=$(xml sel -t -m /_:fmresultset/_:error -v @code "${CURL_OUTPUT}" 2>/dev/null)
        if [[ "${ERROR_CODE}" == 404 ]] ; then
            _report -d "The database is not responding."
        elif [[ "${ERROR_CODE}" == 504 ]] ; then
            _report -d "The database already knows about: ${SCHEMA_NAME}"
        elif [[ -z "${ERROR_CODE}" ]] ; then
            _report -d "There is an error in uploading ${SCHEMA_NAME}:"
            cat "${CURL_OUTPUT}"
        elif [[ "${ERROR_CODE}" != 0 ]] ; then
            _report -d "Warning error code ${ERROR_CODE} from database while uploading the tape record of ${SCHEMA_NAME}."
        fi
    fi
done < "${LTO_TAPE_TMP}"
_report -d "Uploading file metadata for tape "${TAPE_ID}". Please wait…"

LTO_FILE_TMP=$(_maketemp)
xml sel -t -m ".//file" -o " --data-urlencode \"name=" -v name -o "\" --data-urlencode \"length=" -v "length" -o "\" --data-urlencode \"path=" -m "ancestor-or-self::directory" -v "name" -o "/" -b -v name -o "\" --data-urlencode \"readonly=" -v readonly -o "\" --data-urlencode \"creationtime=" -v creationtime -o "\" --data-urlencode \"changetime=" -v changetime -o "\" --data-urlencode \"modifytime=" -v modifytime -o "\" --data-urlencode \"accesstime=" -v accesstime -o "\" --data-urlencode \"backuptime=" -v backuptime -o "\" --data-urlencode \"fileuid=" -v fileuid -o "\" --data-urlencode \"uniq=" -v fileuid -o "." -v modifytime -o "." -v length -o "." -v name -o "\"" -n "${SCHEMA_FILE}" > "${LTO_FILE_TMP}"

while read FILE ; do
    if [[ "${FILE}" ]] ; then
        FILE_CMD="curl ${CURL_OPTS[@]} -G "${FILE}" \"http://${FILEMAKER_XML_URL}?-db=${FILEMAKER_DB}&-lay=lto_files&-new\" ${REDIRECT}"
        FILE_ID=$(echo "${FILE}" | grep -o "name=[^ ]*" | sed 's/"//g')
        eval "${FILE_CMD}"
        ERROR_CODE=$(xml sel -t -m /_:fmresultset/_:error -v @code "${CURL_OUTPUT}" 2>/dev/null)
        if [[ "${ERROR_CODE}" == 404 ]] ; then
            _report -w "The database is not responding."
        elif [[ "${ERROR_CODE}" == 504 ]] ; then
            _report -d "The database already knows about a file in ${SCHEMA_NAME} called $FILE_ID"
        elif [[ -z "${ERROR_CODE}" ]] ; then
            _report -d "There is an error in uploading ${SCHEMA_NAME}:"
            cat "${CURL_OUTPUT}"
            echo
        elif [[ "${ERROR_CODE}" != 0 ]] ; then
            _report -w "Warning error code ${ERROR_CODE} from database while uploading a file record of ${SCHEMA_NAME}."
        fi
    fi
done < "${LTO_FILE_TMP}"
_report -d "Done uploading metadata for ${TAPE_ID}."
