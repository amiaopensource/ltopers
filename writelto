#!/usr/bin/env bash

# writelto
# This script writes the contents of a specified directory onto a mounted
# LTFS-formated LTO tape.

VERSION="0.9"
SCRIPTDIR=$(dirname "${0}")
DEPENDENCIES=(mmfunctions) #### TO DO
TAPE_MOUNT_POINT="/Volumes"
TAPE_SERIAL_REGEX="^[A-Z0-9]{6}(L[567])?$"
HIDDEN_FILES=""
LTO_LOGS="${HOME}/Documents/lto_indexes"
TAPE_EJECT="Y"

. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ; }

_usage(){
cat <<EOF
$(basename "${0}") ${VERSION}
This script writes the contents of a specified directory onto a mounted
LTFS-formated LTO tape.
Dependencies: ${DEPENDENCIES[@]}
Usage: $(basename "${0}") -t [-e] [-v] | -h  -t  tape serial
  -e  state yes (Y) or no (N) to ejecting the tape after write, default
      is yes
  -v  reads back and creates checksums for the contents of a tape, and
      writes checksums to a file named with the tape name and date,
      located in the LTO logs directory
  -h  display this help
EOF
}

OPTIND=1
while getopts ":ht:e:v" opt ; do
    case "${opt}" in
        h) _usage ; exit 0 ;;
        t) TAPE_SERIAL="${OPTARG}" ;;
        e) TAPE_EJECT="${OPTARG}" ;;
        v) VERIFY="Y" ;;
        :) echo "Option -${OPTARG} requires an argument" ; exit 1 ;;
        *) echo "Bad option -${OPTARG}" ; _usage ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

SOURCE_DIR="${1}"
if [[ ! $(echo "${TAPE_SERIAL}" | grep -E "${TAPE_SERIAL_REGEX}") ]] ; then
    _report -w "Tape serial ${TAPE_SERIAL} is not valid. The tape id must be exactly 6 capital letters and/or numbers, possibly followed by 'L5', 'L6' or 'L7' specifying the LTO generation."
    _report -w "Proceeding with non-standard Tape Serial"
fi
# Check for colons in filenames of source directory.
_check_for_colons "${SOURCE_DIR}"

TAPE_PATH="${TAPE_MOUNT_POINT}/${TAPE_SERIAL}"

_checkdir "${SOURCE_DIR}"
# remove .DS_Store files
find "${SOURCE_DIR}/" -name '.DS_Store' -type f -delete
if [ -f "${SOURCE_DIR}"/tapechecksum.md5 ] ; then
    db_fixity=$(cat "${SOURCE_DIR}"/tapechecksum.md5)
fi

_checkdir "${TAPE_PATH}"

gcp --preserve=mode,timestamps -nRv "${SOURCE_DIR}/"* "${TAPE_PATH}"

_run_critical_event "${SCRIPTDIR}/migratefiles" -o "${TAPE_PATH}" "${SOURCE_DIR}/"
RSYNC_ERR_1="$?"
HIDDEN_FILES=$(find "${TAPE_PATH}" -name ".*")
if [[ "${HIDDEN_FILES}" ]] ; then
    echo "Removing hidden files from tape."
    find "${TAPE_PATH}" -name ".*" -delete
    "${SCRIPTDIR}/migratefiles" -o "${TAPE_PATH}" "${SOURCE_DIR}/"
    RSYNC_ERR_2="$?"
fi

if [ -n "$RSYNC_ERR_2" ] ; then
    echo "rsync exited with ${RSYNC_ERR_1} on the first pass and ${RSYNC_ERR_2} on the second pass."
    echo "rsync exited with ${RSYNC_ERR_1} on the first pass and ${RSYNC_ERR_2} on the second pass." >> "${HOME}/Documents/${TAPE_SERIAL}_writelto.txt"
else
    echo "rsync exited with ${RSYNC_ERR_1}."
    echo "rsync exited with ${RSYNC_ERR_1}." >> "${HOME}/Documents/${TAPE_SERIAL}_writelto.txt"
fi

_report_to_db
if [[ "${VERIFY}" = "Y" ]] ; then
    VERIFYTIME=$(_get_iso8601_c)
    READBACKDIR="${LTO_LOGS}/readback_checksums"
    _mkdir2 "${READBACKDIR}"
    find "${TAPE_PATH}" -type f ! -name .DS_Store -exec md5deep -rel "{}" >> "${READBACKDIR}/${TAPE_SERIAL}_ReadBack_checksum_${VERIFYTIME}.md5" \;
fi

echo -n "$(date +%FT%T) " >> "${LTO_LOGS}/tape_capacity.txt"
echo $(df -Ph "${TAPE_PATH}" | tail -n 1) >> "${LTO_LOGS}/tape_capacity.txt"

case "${TAPE_EJECT}" in
    y|Y) umount "${TAPE_PATH}" ;;
    *)   echo "Done writing but not ejecting ${TAPE_SERIAL}." ;;
esac

renameschemas -u

SCHEMA_FILE="$LTO_LOGS/${TAPE_SERIAL}.schema"

_eventoutcome_update
_report_fixity_db
_report_schema_db
if [[ "${VERIFY}" = "Y" ]] ; then
    db_fixity=$(cat "${READBACKDIR}/${TAPE_SERIAL}_ReadBack_checksum_${VERIFYTIME}.md5")
    if [ -z "$db_fixity" ] ; then
        event_outcome="No fixity information"
    fi
    _report_fixity_db
    _db_email_delivery "${SQL_ERROR_EMAIL_TO}"
fi
